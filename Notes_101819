Lab 3 
	Exercise 2
		l-value, left hand value can be a function, but shouldnt be.

Vi
r: a.h (read from a.h)
/class (delete til class def)

g++ -c className.cpp
g++ -c class2.cpp
g++ -o classname.cpp class2.cpp
./a.out

MUST use one of the following in EVERY .h
	ifnDef (if class not defined)
	def (define)
	endif (end define)

	(Non-standard)
	pragma once (if you have included me once, dont include me again)

Protected for parent child
Use friend CAREFULLY. You declare something as private to protect your implementation. Friend lets you see private members.
FRIEND is for Ostream ONLY (we may learn other uses when more experienced).


	cout : What you put in may or may not display **endl will flush buffer **cout.flush() **otherwise may not print
	cerr : will always display immediately, at the cost of your system speed
	buffer : holds or flushes

	./a.out 1> OUT 2> ERR
	cat OUT
	cat ERR
	1 goes to out, 2 goes to err
	1 = output, 2 = error (I think)

jobs (processes) vi (vim) can be stopped and restarted

vi -- look up keyboard shortcuts



__________________LAB 4: Notes____________________
		Today: Copy constructor, template, 
		iterator, C++ Standard template library

Compiler creates default constructor/destructor,
Copy constructor, assignment operator.

Data members: Primitive, class, pointer.

Default, shallow copy.
Manual, deep copy. YOU MUST WRITE.

Templates: "Polymorphism"
	 - Defined behaviour without specifying a data type.
	 - Allows you to write algorithms for any type.

	Syntax: (either works)
	template<class ItemType 
	or 
	template<typename ItemType>

	Reserved words:
	 - template
	 - class
	 - typename

	Example template function:
		template <class ItemType>
		void Swap(ItemType &x, ItemType &y)
		{
			ItemType temp = x; x = y; y = temp;
		}
		int main()
		{
			//swap anything
			return 0;
		}

	Example template class:
		template<class ItemTypeA, class ItemTypeB, class ItemTypeC> 
		ItemType foo(ItemTypeA a, ItemTypeB b){
			//operate on a
			//operate on b
			//return c type
		}

		__________

		.h file

		template<class ITemType>
		class SortedList
		{
			public:
			...

			Private:
			...

		}


	In template, include .cpp at end of .h, no other situation. DO NOT complile the template. 
	To compile, type in main.cpp: #include "templateName.h" Compile main.cpp ONLY. ONLY case.

Iterators:
	Gives you objects. 



**** Windows subsystem for linux with UBUNTU
null/nullptr
g++ -std=c++11

g++ -std=c++11 -Wextra -Wall *.cpp -o MyExec

ubuntu run valgrind --log-file="filename" --tool=memcheck --leak-check=yes --show-reachable=yes --num-callers=20 --track-fds=yes ./myExec